# -*- coding: utf-8 -*-
"""data_preprocessing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Mw7J5qTkuDo1Z5ky5q9wsIDhOWhpddRW

### **Data Preprocessing**
We will load the Fashion MNIST test and train dataset from Kaggle, total containing 70,000 images, 28x28 pixels, greyscaled [0,255].

<br>

For data preprocessing, we will combine both train and test datasets. We will then do feature scaling of X from [0,255] to [0,1] to improve model efficiency. We will then do our own test and train splits.

<br>

The dataset is split into 80% train data and 20% test data. We will use the same train and test dataset across both models (SVM and Random Forest) for fair comparisons.

<br>

As Random Forest works better without PCA and SVM works better with PCA, we will compare Random Forest (without PCA) against SVM (with PCA).
"""

# import packages
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.svm import SVC

# Label map for Fashion-MNIST
label_map = {
    0: "T-shirt/top",
    1: "Trouser",
    2: "Pullover",
    3: "Dress",
    4: "Coat",
    5: "Sandal",
    6: "Shirt",
    7: "Sneaker",
    8: "Bag",
    9: "Ankle boot"
}

def load_fashion_mnist_splits(
    train_csv="fashion-mnist_train.csv",
    test_csv="fashion-mnist_test.csv",
    seed=42,
    test_size=0.2,
    with_pca=False,
    pca_variance=0.95
):
    """
    Load Fashion-MNIST from Kaggle CSVs, scale to [0,1],
    and split into Train/Test.

    Args:
        train_csv (str): path to train CSV
        test_csv (str): path to test CSV
        seed (int): random seed for reproducibility
        test_size (float): fraction of total data reserved for test
        with_pca (bool): if True, also return PCA-transformed splits
        pca_variance (float): variance to keep if with_pca=True (default=0.95)

    Returns:
        If with_pca=False:
            X_train, y_train, X_test, y_test
        If with_pca=True:
            (X_train, y_train, X_test, y_test,
             X_train_pca, X_test_pca)
    """
    # Load train and test csv
    train_df = pd.read_csv(train_csv)
    test_df = pd.read_csv(test_csv)

    # seperate labels and features
    y_train_full = train_df["label"].values
    X_train_full = train_df.drop(columns=["label"]).values
    y_test_orig = test_df["label"].values
    X_test_orig = test_df.drop(columns=["label"]).values

    # combine datasets
    X_full = np.vstack([X_train_full, X_test_orig])
    y_full = np.concatenate([y_train_full, y_test_orig])

    # scale pixel from [1,255] to [0,1]
    X_full = X_full.astype(np.float32) / 255.0

    # 5. train / test split
    X_train, X_test, y_train, y_test = train_test_split(
        X_full, y_full,
        test_size=test_size,
        random_state=seed,
        stratify=y_full
    )

    if not with_pca:
        return X_train, y_train, X_test, y_test

    # pca for svm
    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled  = scaler.transform(X_test)

    pca = PCA(n_components=pca_variance, random_state=seed)
    X_train_pca = pca.fit_transform(X_train_scaled)
    X_test_pca  = pca.transform(X_test_scaled)

    return (X_train, y_train, X_test, y_test,
            X_train_pca, X_test_pca)


if __name__ == "__main__":
    raw = load_fashion_mnist_splits()
    print("Without PCA -> Train:", raw[0].shape, "Test:", raw[2].shape)

    withpca = load_fashion_mnist_splits(with_pca=True)
    print("With PCA -> Train:", withpca[4].shape, "Test:", withpca[5].shape)